#!/usr/bin/env node

// src/index.ts
import { Command } from "commander";
import { readFileSync, statSync } from "fs";
import * as fs from "fs/promises";
import { join as join2, dirname as dirname2, basename as basename2 } from "path";
import { fileURLToPath } from "url";

// src/utils/fileReader.ts
import { readFile, access, readdir, stat } from "fs/promises";
import { resolve, isAbsolute, relative, join } from "path";
import { constants } from "fs";
var FileReadError = class extends Error {
  constructor(message, filePath) {
    super(message);
    this.filePath = filePath;
    this.name = "FileReadError";
  }
};
function resolveFilePath(filePath) {
  if (isAbsolute(filePath)) {
    return filePath;
  }
  return resolve(process.cwd(), filePath);
}
async function checkFileAccess(filePath) {
  try {
    await access(filePath, constants.R_OK);
  } catch (error) {
    if (error.code === "ENOENT") {
      throw new FileReadError(`File not found: ${filePath}`, filePath);
    }
    if (error.code === "EACCES") {
      throw new FileReadError(`Permission denied: ${filePath}`, filePath);
    }
    throw new FileReadError(`Cannot access file: ${filePath}`, filePath);
  }
}
async function readFileAsBase64(filePath) {
  const absolutePath = resolveFilePath(filePath);
  await checkFileAccess(absolutePath);
  try {
    const buffer = await readFile(absolutePath);
    const base64Content = buffer.toString("base64");
    return {
      path: absolutePath,
      content: base64Content,
      encoding: "base64"
    };
  } catch (error) {
    throw new FileReadError(
      `Failed to read file: ${error.message}`,
      absolutePath
    );
  }
}
function shouldExclude(filePath) {
  const excluded = [".git", "node_modules", ".DS_Store"];
  const parts = filePath.split("/");
  for (const part of parts) {
    if (excluded.includes(part)) return true;
    if (part.startsWith(".")) return true;
  }
  return false;
}
async function collectFilesRecursively(dirPath) {
  const absolutePath = resolveFilePath(dirPath);
  try {
    const stats = await stat(absolutePath);
    if (!stats.isDirectory()) {
      throw new FileReadError(`Not a directory: ${dirPath}`, absolutePath);
    }
    await checkFileAccess(absolutePath);
  } catch (error) {
    if (error.code === "EACCES") {
      throw new FileReadError(
        `Cannot read directory: permission denied - ${dirPath}`,
        absolutePath
      );
    }
    if (error.code === "ENOENT") {
      throw new FileReadError(`Directory not found: ${dirPath}`, absolutePath);
    }
    throw error;
  }
  const files = [];
  async function traverse(currentPath) {
    const entries = await readdir(currentPath, { withFileTypes: true });
    if (entries.length === 0) {
      return;
    }
    for (const entry of entries) {
      const fullPath = join(currentPath, entry.name);
      const relativePath = relative(absolutePath, fullPath);
      if (shouldExclude(relativePath)) {
        continue;
      }
      if (entry.isDirectory() && !entry.isSymbolicLink()) {
        await traverse(fullPath);
      } else if (entry.isFile()) {
        files.push(fullPath);
      }
    }
  }
  await traverse(absolutePath);
  if (files.length === 0) {
    throw new FileReadError(
      `The directory is empty or no files found after filtering: ${dirPath}`,
      absolutePath
    );
  }
  return files;
}
async function readMultipleFiles(filePaths, baseDir) {
  const results = [];
  for (const filePath of filePaths) {
    const absolutePath = resolveFilePath(filePath);
    await checkFileAccess(absolutePath);
    try {
      const buffer = await readFile(absolutePath);
      const base64Content = buffer.toString("base64");
      let displayPath = absolutePath;
      if (baseDir) {
        const baseDirAbsolute = resolveFilePath(baseDir);
        displayPath = relative(baseDirAbsolute, absolutePath);
      }
      results.push({
        path: displayPath,
        content: base64Content,
        encoding: "base64"
      });
    } catch (error) {
      throw new FileReadError(
        `Failed to read file: ${error.message}`,
        absolutePath
      );
    }
  }
  return results;
}

// src/utils/github.ts
import { Octokit } from "@octokit/rest";
import { basename } from "path";
var GitHubError = class extends Error {
  constructor(message, code) {
    super(message);
    this.code = code;
    this.name = "GitHubError";
  }
};
function parseRepoUrl(repoUrl) {
  const match = repoUrl.match(/^([^/]+)\/([^/]+)$/);
  if (!match) {
    throw new GitHubError(
      `Invalid repository format: ${repoUrl}. Expected format: owner/repo`
    );
  }
  return { owner: match[1], repo: match[2] };
}
function getGitHubToken() {
  const token = process.env.GITHUB_TOKEN;
  if (!token) {
    throw new GitHubError(
      "GitHub token not found. Please set GITHUB_TOKEN environment variable."
    );
  }
  return token;
}
function createOctokitClient(token) {
  return new Octokit({ auth: token });
}
async function getRepoInfo(repoUrl) {
  const { owner, repo } = parseRepoUrl(repoUrl);
  const token = getGitHubToken();
  const octokit = createOctokitClient(token);
  try {
    const { data } = await octokit.rest.repos.get({
      owner,
      repo
    });
    return {
      owner,
      repo,
      defaultBranch: data.default_branch,
      fullName: data.full_name
    };
  } catch (error) {
    if (error.status === 401) {
      throw new GitHubError(
        "Authentication failed. Please check your GITHUB_TOKEN.",
        "AUTH_FAILED"
      );
    }
    if (error.status === 404) {
      throw new GitHubError(
        `Repository not found: ${owner}/${repo}`,
        "REPO_NOT_FOUND"
      );
    }
    throw new GitHubError(
      `Failed to fetch repository info: ${error.message}`,
      "API_ERROR"
    );
  }
}
function generateBranchName(filePath) {
  const fileName = basename(filePath);
  const timestamp = Date.now();
  return `pr-cannon/add-${fileName}-${timestamp}`;
}
async function createBranchWithFile(repoUrl, sourcePathOrFile, fileContents, branchNamePrefix) {
  const { owner, repo } = parseRepoUrl(repoUrl);
  const token = getGitHubToken();
  const octokit = createOctokitClient(token);
  try {
    const repoInfo = await getRepoInfo(repoUrl);
    const defaultBranch = repoInfo.defaultBranch;
    const { data: refData } = await octokit.rest.git.getRef({
      owner,
      repo,
      ref: `heads/${defaultBranch}`
    });
    const baseSha = refData.object.sha;
    const branchName = branchNamePrefix || `pr-cannon/add-${basename(sourcePathOrFile)}-${Date.now()}`;
    await octokit.rest.git.createRef({
      owner,
      repo,
      ref: `refs/heads/${branchName}`,
      sha: baseSha
    });
    const { data: baseCommit } = await octokit.rest.git.getCommit({
      owner,
      repo,
      commit_sha: baseSha
    });
    const baseTreeSha = baseCommit.tree.sha;
    const treeEntries = fileContents.map((file) => ({
      path: file.path,
      mode: "100644",
      type: "blob",
      content: file.content
    }));
    const { data: newTree } = await octokit.rest.git.createTree({
      owner,
      repo,
      base_tree: baseTreeSha,
      tree: treeEntries
    });
    const commitMessage = fileContents.length === 1 ? `Add ${basename(fileContents[0].path)} via pr-cannon` : `Add ${fileContents.length} files via pr-cannon`;
    const { data: newCommit } = await octokit.rest.git.createCommit({
      owner,
      repo,
      message: commitMessage,
      tree: newTree.sha,
      parents: [baseSha]
    });
    await octokit.rest.git.updateRef({
      owner,
      repo,
      ref: `heads/${branchName}`,
      sha: newCommit.sha
    });
    return {
      branchName,
      commitSha: newCommit.sha
    };
  } catch (error) {
    if (error.status === 422) {
      throw new GitHubError(
        "Failed to create branch or commit. The file might already exist.",
        "COMMIT_FAILED"
      );
    }
    throw new GitHubError(
      `Failed to create branch with file: ${error.message}`,
      "API_ERROR"
    );
  }
}
async function createPullRequest(repoUrl, branchName, sourceName, fileList, totalFileCount) {
  const { owner, repo } = parseRepoUrl(repoUrl);
  const token = getGitHubToken();
  const octokit = createOctokitClient(token);
  try {
    const repoInfo = await getRepoInfo(repoUrl);
    const defaultBranch = repoInfo.defaultBranch;
    const fileCount = totalFileCount || fileList.length;
    const title = fileCount === 1 ? `Add ${basename(fileList[0])} via pr-cannon` : `Add ${fileCount} files via pr-cannon`;
    let bodyChanges;
    if (fileCount === 1) {
      bodyChanges = `- Added file: \`${fileList[0]}\``;
    } else if (fileList.length <= 10) {
      bodyChanges = `- Added ${fileCount} files:
${fileList.map((f) => `  - \`${f}\``).join("\n")}`;
    } else {
      bodyChanges = `- Added ${fileCount} files:
${fileList.slice(0, 10).map((f) => `  - \`${f}\``).join("\n")}
  - ... and ${fileCount - 10} more files`;
    }
    const body = `\u{1F3AF} This PR was automatically created by [pr-cannon](https://github.com/is0692vs/pr-cannon)

## Changes
${bodyChanges}

---
Generated by pr-cannon \u{1F4A3}`;
    const { data: pr } = await octokit.rest.pulls.create({
      owner,
      repo,
      title,
      body,
      head: branchName,
      base: defaultBranch
    });
    return {
      prNumber: pr.number,
      prUrl: pr.html_url
    };
  } catch (error) {
    if (error.status === 422) {
      throw new GitHubError(
        "Failed to create pull request. A PR may already exist for this branch.",
        "PR_FAILED"
      );
    }
    throw new GitHubError(
      `Failed to create pull request: ${error.message}`,
      "API_ERROR"
    );
  }
}

// src/index.ts
var __filename = fileURLToPath(import.meta.url);
var __dirname = dirname2(__filename);
var packageJson = JSON.parse(
  readFileSync(join2(__dirname, "../package.json"), "utf-8")
);
var program = new Command();
program.name("pr-cannon").description("\u{1F4A3} Fire your files to any repository as a Pull Request").version(packageJson.version);
program.command("fire").description("Fire multiple files or folders to a repository as a PR").argument(
  "<paths...>",
  "Files or folders to send (last argument is the repository)"
).option("-p, --path <path>", "Destination path in the repository").action(async (inputArgs, options) => {
  try {
    if (inputArgs.length < 2) {
      console.error(
        "\u274C Error: At least one file/folder and a repository must be specified"
      );
      console.error("\uFFFD Usage: prca fire <file1> [file2...] <owner/repo>");
      process.exit(1);
    }
    const repo = inputArgs[inputArgs.length - 1];
    const inputPaths = inputArgs.slice(0, -1);
    console.log(`\u{1F3AF} Targeting: ${repo}`);
    console.log(`\u{1F4E6} Input paths: ${inputPaths.length} item(s)`);
    const allFiles = [];
    const processedPaths = [];
    for (const inputPath of inputPaths) {
      try {
        const resolvedPath = resolveFilePath(inputPath);
        await checkFileAccess(resolvedPath);
        const stats = await fs.stat(resolvedPath);
        if (stats.isDirectory()) {
          console.log(`\u{1F4C1} Collecting files from directory: ${inputPath}`);
          const dirFiles = await collectFilesRecursively(inputPath);
          if (dirFiles.length === 0) {
            console.error(
              `\u274C Error: Directory is empty or contains only excluded files: ${inputPath}`
            );
            process.exit(1);
          }
          const contents = await readMultipleFiles(dirFiles, inputPath);
          allFiles.push(...contents);
          processedPaths.push(`${inputPath}/ (${dirFiles.length} files)`);
        } else {
          console.log(`\u{1F4C4} Reading file: ${inputPath}`);
          const fileContent = await readFileAsBase64(inputPath);
          const fileName = basename2(inputPath);
          allFiles.push({
            path: fileName,
            content: fileContent.content,
            encoding: "base64"
          });
          processedPaths.push(inputPath);
        }
      } catch (error) {
        if (error instanceof FileReadError) {
          console.error(`\u274C Error: ${error.message}`);
        } else {
          console.error(`\u274C Error accessing path "${inputPath}"`);
        }
        process.exit(1);
      }
    }
    console.log(`
\u2705 Total files collected: ${allFiles.length}`);
    processedPaths.forEach((p) => console.log(`   - ${p}`));
    console.log(`
\u{1F517} Connecting to GitHub...`);
    const repoInfo = await getRepoInfo(repo);
    console.log(`\u2705 Repository: ${repoInfo.fullName}`);
    console.log(`\u{1F33F} Default branch: ${repoInfo.defaultBranch}`);
    const branchName = inputPaths.length === 1 ? generateBranchName(inputPaths[0]) : generateBranchName("multiple-files");
    console.log(`
\u{1F33F} Creating branch and committing...`);
    const { branchName: createdBranch, commitSha } = await createBranchWithFile(repo, "pr-cannon", allFiles, branchName);
    console.log(`\u2705 Branch created: ${createdBranch}`);
    console.log(`\u2705 Commit created: ${commitSha.substring(0, 7)}`);
    console.log(`
\u{1F680} Creating pull request...`);
    const filePaths = allFiles.map((f) => f.path);
    const { prNumber, prUrl } = await createPullRequest(
      repo,
      createdBranch,
      inputPaths.length === 1 ? basename2(inputPaths[0]) : "multiple files",
      filePaths,
      allFiles.length
    );
    console.log(`\u2705 Pull request created: #${prNumber}`);
    console.log(`\u{1F517} PR URL: ${prUrl}`);
    console.log(`
\u{1F389} Done! ${allFiles.length} file(s) have been fired! \u{1F4A3}`);
  } catch (error) {
    if (error instanceof FileReadError) {
      console.error(`
\u274C File Error: ${error.message}`);
      process.exit(1);
    }
    if (error instanceof GitHubError) {
      console.error(`
\u274C GitHub Error: ${error.message}`);
      process.exit(1);
    }
    console.error(`
\u274C Unexpected error:`, error);
    process.exit(1);
  }
});
program.command("test").description("Create a test PR from current directory").argument("<repo>", "Repository (owner/repo format)").option("-p, --path <path>", "Destination path in the repository").action(async (repo, options) => {
  try {
    const cwd = process.cwd();
    console.log(`\u{1F9EA} Test PR Creation Mode`);
    console.log(`\u{1F4CD} Current directory: ${cwd}`);
    console.log(`\u{1F3AF} Target repository: ${repo}`);
    const stat3 = statSync(cwd);
    if (!stat3.isDirectory()) {
      throw new FileReadError("Current working directory is not valid", cwd);
    }
    console.log(`
\u{1F4CA} Analyzing current directory...`);
    const absoluteFilePaths = await collectFilesRecursively(cwd);
    console.log(`\u2705 Found ${absoluteFilePaths.length} files to test`);
    if (absoluteFilePaths.length === 0) {
      throw new FileReadError(
        "No files found in current directory (or all excluded)",
        "NO_FILES"
      );
    }
    let fileContentsArray = await readMultipleFiles(absoluteFilePaths, cwd);
    const dirName = basename2(cwd);
    console.log(`\u{1F4C1} Directory name: ${dirName}`);
    let destinationBase = options.path || `test-${dirName}-${Date.now()}`;
    fileContentsArray = fileContentsArray.map((f) => ({
      path: join2(destinationBase, f.path),
      content: f.content,
      encoding: "base64"
    }));
    console.log(`
\u{1F517} Connecting to GitHub...`);
    const repoInfo = await getRepoInfo(repo);
    console.log(`\u2705 Repository: ${repoInfo.fullName}`);
    console.log(`
\u{1F33F} Creating test branch...`);
    const { branchName, commitSha } = await createBranchWithFile(
      repo,
      cwd,
      fileContentsArray
    );
    console.log(`\u2705 Branch created: ${branchName}`);
    console.log(`\u2705 Commit created: ${commitSha.substring(0, 7)}`);
    console.log(`
\u{1F680} Creating test PR...`);
    const filePaths = fileContentsArray.map((f) => f.path);
    const { prNumber, prUrl } = await createPullRequest(
      repo,
      branchName,
      `test: ${dirName}`,
      filePaths,
      absoluteFilePaths.length
    );
    console.log(`\u2705 Test PR created: #${prNumber}`);
    console.log(`\u{1F517} PR URL: ${prUrl}`);
    console.log(`
\u{1F4DD} Test Info:`);
    console.log(`   Files: ${absoluteFilePaths.length}`);
    console.log(`   Destination: ${destinationBase}`);
    console.log(`
\u{1F389} Test PR ready for validation! \u{1F9EA}`);
  } catch (error) {
    if (error instanceof FileReadError) {
      console.error(`
\u274C File Error: ${error.message}`);
      process.exit(1);
    }
    if (error instanceof GitHubError) {
      console.error(`
\u274C GitHub Error: ${error.message}`);
      process.exit(1);
    }
    console.error(`
\u274C Unexpected error:`, error);
    process.exit(1);
  }
});
program.parse();
